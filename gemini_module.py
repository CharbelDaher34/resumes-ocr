from google import genai
from PIL import Image


class GeminiModule:
    def __init__(self, api_key, model='gemini-2.0-flash', temperature=0.01):
        """
        Initialize the Gemini API client.
        
        Args:
            api_key (str): Your Gemini API key.
            model (str): The Gemini model to use (default is 'gemini-2.0-flash').
            temperature (float): Controls randomness in the output (0.0 to 1.0, default 0.7).
        """
        self.client = genai.Client(api_key=api_key)
        self.model = model
        self.temperature = temperature

    def process_text_and_image(self, text, image_input):
        """
        Sends a text prompt and an image to the Gemini API and returns the output.
        
        Args:
            text (str): The text prompt.
            image_input (str or PIL.Image.Image): The image, either as a file path or a PIL Image object.
            
        Returns:
            str: The output text generated by the Gemini API.
        """
        # If image_input is a file path, load the image using PIL.
        if isinstance(image_input, str):
            image = Image.open(image_input)
        elif isinstance(image_input, Image.Image):
            image = image_input
        else:
            raise ValueError("image_input must be a file path or a PIL.Image object")
        
        # Combine the text and image into a single prompt.
        contents = [text, image]
        
        # Make the API request to generate content.
        response = self.client.models.generate_content(
            model=self.model,
            contents=contents,
        )
        return response.text

    def process_text_and_images(self, text, image_inputs: list):
        """
        Sends a text prompt and a list of images to the Gemini API and returns the output.
        
        Args:
            text (str): The text prompt.
            image_inputs (list): A list of images, either as file paths (str) or as PIL.Image.Image objects.
            
        Returns:
            str: The output text generated by the Gemini API.
        """
        processed_images = []
        for image_input in image_inputs:
            if isinstance(image_input, str):
                image = Image.open(image_input)
            elif hasattr(image_input, "read"):  # allow file-like objects if needed
                image = Image.open(image_input)
            elif isinstance(image_input, Image.Image):
                image = image_input
            else:
                raise ValueError("Each image_input must be a file path or a PIL.Image.Image object")
            processed_images.append(image)
        
        # Combine the text and all images into one prompt.
        contents = [text] + processed_images
        
        response = self.client.models.generate_content(
            model=self.model,
            contents=contents,
        )
        return response.text

